/* Automatically generated nanopb header */
/* Generated by nanopb-1.0.0-dev */

#ifndef PB_I2C_PB_H_INCLUDED
#define PB_I2C_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Enum definitions */
typedef enum _I2CError {
    I2CError_SUCCESS = 0,
    I2CError_INCORRECT_INPUT = 1,
    I2CError_BUS_ERROR = 2,
    I2CError_ARBITRATION_LOSS = 3,
    I2CError_NO_ACKNOWLEDGE_ADDRESS = 4,
    I2CError_NO_ACKNOWLEDGE_DATA = 5,
    I2CError_NO_ACKNOWLEDGE_UNKNOWN = 6,
    I2CError_TIMEOUT = 7,
    I2CError_UNKNOWN = 8
} I2CError;

/* Struct definitions */
typedef PB_BYTES_ARRAY_T(4096) I2CReadWriteRequest_write_t;
typedef struct _I2CReadWriteRequest {
    uint32_t address;
    uint32_t frequency;
    uint32_t byte_number;
    I2CReadWriteRequest_write_t write;
} I2CReadWriteRequest;

typedef PB_BYTES_ARRAY_T(4096) I2CReadWriteResponse_read_t;
typedef struct _I2CReadWriteResponse {
    I2CError error;
    I2CReadWriteResponse_read_t read;
} I2CReadWriteResponse;


#ifdef __cplusplus
extern "C" {
#endif

/* Helper constants for enums */
#define _I2CError_MIN I2CError_SUCCESS
#define _I2CError_MAX I2CError_UNKNOWN
#define _I2CError_ARRAYSIZE ((I2CError)(I2CError_UNKNOWN+1))


#define I2CReadWriteResponse_error_ENUMTYPE I2CError


/* Initializer values for message structs */
#define I2CReadWriteRequest_init_default         {0, 0, 0, {0, {0}}}
#define I2CReadWriteResponse_init_default        {_I2CError_MIN, {0, {0}}}
#define I2CReadWriteRequest_init_zero            {0, 0, 0, {0, {0}}}
#define I2CReadWriteResponse_init_zero           {_I2CError_MIN, {0, {0}}}

/* Field tags (for use in manual encoding/decoding) */
#define I2CReadWriteRequest_address_tag          1
#define I2CReadWriteRequest_frequency_tag        2
#define I2CReadWriteRequest_byte_number_tag      3
#define I2CReadWriteRequest_write_tag            4
#define I2CReadWriteResponse_error_tag           1
#define I2CReadWriteResponse_read_tag            2

/* Struct field encoding specification for nanopb */
#define I2CReadWriteRequest_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   address,           1) \
X(a, STATIC,   SINGULAR, UINT32,   frequency,         2) \
X(a, STATIC,   SINGULAR, UINT32,   byte_number,       3) \
X(a, STATIC,   SINGULAR, BYTES,    write,             4)
#define I2CReadWriteRequest_CALLBACK NULL
#define I2CReadWriteRequest_DEFAULT NULL

#define I2CReadWriteResponse_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UENUM,    error,             1) \
X(a, STATIC,   SINGULAR, BYTES,    read,              2)
#define I2CReadWriteResponse_CALLBACK NULL
#define I2CReadWriteResponse_DEFAULT NULL

extern const pb_msgdesc_t I2CReadWriteRequest_msg;
extern const pb_msgdesc_t I2CReadWriteResponse_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define I2CReadWriteRequest_fields &I2CReadWriteRequest_msg
#define I2CReadWriteResponse_fields &I2CReadWriteResponse_msg

/* Maximum encoded size of messages (where known) */
#define I2CReadWriteRequest_size                 4117
#define I2CReadWriteResponse_size                4101
#define I2C_PB_H_MAX_SIZE                        I2CReadWriteRequest_size

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
